version: '1'

services:
  mysql:
    image: mysql:8.3
    container_name: mysql
    ports:
      - 3307:3306
    environment:
      MYSQL_ROOT_PASSWORD: admin
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./.db/mysql/data:/var/lib/mysql
      - ./.db/mysql/config:/etc/mysql/conf.d
    networks:
      - micro-commerce-network

  service-discovery:
    container_name: service-discovery
    build:
      context: ./service-discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - micro-commerce-network
    depends_on:
      - mysql

#  config-server:
#    container_name: config-server
#    build:
#      context: ./config-server
#      dockerfile: Dockerfile
#    ports:
#      - "8888:8888"
#    networks:
#      - micro-commerce-network
#    depends_on:
#      service-discovery:
#        condition: service_started

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - micro-commerce-network
    depends_on:
      service-discovery:
          condition: service_started

  member-service:
    container_name: micro-commerce-member
    build:
      context: ./micro-commerce-member
      dockerfile: Dockerfile
    environment:
      USE_PROFILE: dev
    networks:
      - micro-commerce-network
    depends_on:
      service-discovery:
        condition: service_started
      api-gateway:
        condition: service_started

  product-service:
    container_name: micro-commerce-product
    build:
      context: ./micro-commerce-product
      dockerfile: Dockerfile
    environment:
      USE_PROFILE: dev
    networks:
      - micro-commerce-network
    depends_on:
      service-discovery:
        condition: service_started
      api-gateway:
        condition: service_started

  order-service:
    container_name: micro-commerce-order
    build:
      context: ./micro-commerce-order
      dockerfile: Dockerfile
    environment:
      USE_PROFILE: dev
    networks:
      - micro-commerce-network
    depends_on:
      service-discovery:
        condition: service_started
      api-gateway:
        condition: service_started

  order-consumer:
    container_name: micro-commerce-order-consumer
    build:
      context: ./micro-commerce-order-consumer
      dockerfile: Dockerfile
    environment:
      USE_PROFILE: dev
    networks:
      - micro-commerce-network
    depends_on:
      service-discovery:
        condition: service_started
      api-gateway:
        condition: service_started

  zookeeper:
    image: bitnami/zookeeper:3.9.1
    container_name: zookeeper
    networks:
      - micro-commerce-network
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes

  kafka-1:
    image: bitnami/kafka:3.6.1
    container_name: kafka-1
    depends_on:
      - zookeeper
    networks:
      - micro-commerce-network
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092

  kafka-2:
    image: bitnami/kafka:3.6.1
    container_name: kafka-2
    depends_on:
      - zookeeper
    networks:
      - micro-commerce-network
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092

  kafka-3:
    image: bitnami/kafka:3.6.1
    container_name: kafka-3
    depends_on:
      - zookeeper
    networks:
      - micro-commerce-network
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9092

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
      - kafka-3
    networks:
      - micro-commerce-network
    ports:
      - "8989:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

networks:
  micro-commerce-network:
    driver: bridge